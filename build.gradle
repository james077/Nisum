
/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.6.1/userguide/tutorial_java_projects.html
 */
buildscript {

    ext {
        springBootVersion = '2.7.16'
        mapstructVersion = '1.4.2.Final'
        lombokVersion = '1.18.6'
    }

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'


group 'com.chagengeapi'
description 'challenge-be-fuego'
version '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring
    implementation "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // ---------- Documentation
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.7.0'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-webmvc-core', version: '1.7.0'

    // Swagger Annotation dependencies (springfox-swagger)
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
    implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'

    //JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // Libs
    compileOnly "org.mapstruct:mapstruct:${mapstructVersion}"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation('com.h2database:h2:1.4.200')


    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    compileOnly('org.junit.jupiter:junit-jupiter-api:5.3.1')
    compileOnly('org.junit.jupiter:junit-jupiter-engine:5.3.1')
    compileOnly('org.mockito:mockito-junit-jupiter:2.23.0')

}


bootJar {
    archivesBaseName = project.description
    archiveVersion = project.hasProperty('archiveVersion') ? project.archiveVersion : project.version
}

jar {
    dependsOn bootJar
    manifest {
        attributes 'Implementation-Title': project.description,
                'Implementation-Version': project.hasProperty('artifactVersion') ? project.artifactVersion : project.version
    }
}

test {
    useJUnitPlatform {
        excludeTags 'ide'
    }
    testLogging {
        events "passed", "skipped", "failed"
    }
}


jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            excludes = ['**.*NisumApi*',
                        '**.annotation.*',
                        '**.config.*',
                        '**.constants.*',
                        '**.domain.*',
                        '**.dto.**',
                        '**.exception.*',
                        '**.properties.**',
                        '**.mapper.*',
                        '**.response.*'
            ]
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }
        }
    }
}


check.dependsOn jacocoTestCoverageVerification
